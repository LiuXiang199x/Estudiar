// Generated by gencpp from file ros_tutorial/counterGoal.msg
// DO NOT EDIT!


#ifndef ROS_TUTORIAL_MESSAGE_COUNTERGOAL_H
#define ROS_TUTORIAL_MESSAGE_COUNTERGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_tutorial
{
template <class ContainerAllocator>
struct counterGoal_
{
  typedef counterGoal_<ContainerAllocator> Type;

  counterGoal_()
    : goal_num(0)  {
    }
  counterGoal_(const ContainerAllocator& _alloc)
    : goal_num(0)  {
  (void)_alloc;
    }



   typedef int32_t _goal_num_type;
  _goal_num_type goal_num;





  typedef boost::shared_ptr< ::ros_tutorial::counterGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_tutorial::counterGoal_<ContainerAllocator> const> ConstPtr;

}; // struct counterGoal_

typedef ::ros_tutorial::counterGoal_<std::allocator<void> > counterGoal;

typedef boost::shared_ptr< ::ros_tutorial::counterGoal > counterGoalPtr;
typedef boost::shared_ptr< ::ros_tutorial::counterGoal const> counterGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_tutorial::counterGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_tutorial::counterGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_tutorial::counterGoal_<ContainerAllocator1> & lhs, const ::ros_tutorial::counterGoal_<ContainerAllocator2> & rhs)
{
  return lhs.goal_num == rhs.goal_num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_tutorial::counterGoal_<ContainerAllocator1> & lhs, const ::ros_tutorial::counterGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_tutorial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_tutorial::counterGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_tutorial::counterGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_tutorial::counterGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_tutorial::counterGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_tutorial::counterGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_tutorial::counterGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_tutorial::counterGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99fc8ea054f24b75e22a1cacf948e8fe";
  }

  static const char* value(const ::ros_tutorial::counterGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99fc8ea054f24b75ULL;
  static const uint64_t static_value2 = 0xe22a1cacf948e8feULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_tutorial::counterGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_tutorial/counterGoal";
  }

  static const char* value(const ::ros_tutorial::counterGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_tutorial::counterGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int32 goal_num\n"
;
  }

  static const char* value(const ::ros_tutorial::counterGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_tutorial::counterGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct counterGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_tutorial::counterGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_tutorial::counterGoal_<ContainerAllocator>& v)
  {
    s << indent << "goal_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_TUTORIAL_MESSAGE_COUNTERGOAL_H
