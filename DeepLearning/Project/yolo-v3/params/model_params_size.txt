单位：K - 千10^3， M - 兆10^6， G - 吉10^9， T - 太拉10^12
bit就是位，八个二进制位：0 0 0 0 0 0 0 1
8 bit（位） = 1 Byte（字节）
1024 Byte（字节） = 1KB
1024KB = 1MB
1024MB = 1GB
1024GB = 1TB
========================================================
# 保存网络结构 + 参数
    torch.save(net, "xxx.pkl/pth/pt")
# 保存参数
    torch.save(net.state_dict(), "xxx.pkl/pth.pt")
以本项目 yolo v3为例：
    保存模型+参数大小为：258504533 byte = 258.X MB
    仅保存参数大小为：258476821 byte = 258.X MB
    做差能知道网络结构的大小为：27712 byte = 27.7 Kb
一般小模型的定义：参数量 500Mb以下，模型大小10Mb以下。（很少会有参数量达到1个G的，一般分类模型大小很多时候1Mb都不到）
==========================================================
图像：200*200， 一个像素占三个字节（三通道）
内存占用大小应该为：200*200*3B = 120000B = 0.12KB
（正常情况下：一个像素都是要一个字节的，一个字节=8bit，8bit刚好可以表示256状态）
（灰度图像一个像素就仅需要一个bit，二值化图像，非黑即白）
（图像压缩就是改变一个像素的占用空间）
==========================================================
一个模型参数量是1M，在一般的深度学习框架中(比如说PyTorch)，一般是32位存储。
32位存储的意思就是1个参数用32个bit来存储。
那么这个拥有1M参数量的模型所需要的存储空间的大小即为：1M * 32 bit = 32Mb(bit) = 4MB。
现在的quantization技术就是减少参数量所占的位数：比如我用8位存储，
那么：所需要的存储空间的大小即为：1M * 8 bit = 8Mb = 1MB。